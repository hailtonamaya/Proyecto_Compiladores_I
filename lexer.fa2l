#include <cstdio>
#include <cstdlib>
#include <cctype>
#include <sstream>
#include "lexer.hpp"

/*!fa2lexer
    %option generate.tokens = true;

    %file "fa/Tokens.jff" name "Tokens";
    %file "fa/Symbols.jff" name "Symbols";
    %file "fa/Operators.jff" name "Operators";

    %generate.state_enum(State);
*/

void Lexer::ungetToken(Token tk)
{   
    tokenAhead.tk = tk;
    tokenAhead.text = getText();
    tokenStack.push(tokenAhead);  // Almacenar el token en la pila
}

void Lexer::ungetTokens(const std::vector<tkAhead>& tokens)
{
    for (tkAhead tk : tokens) {
        tokenAhead = tk;
        tokenAhead.text = getText();
        tokenStack.push(tokenAhead);  // Almacena cada token en la pila
    }
}


Token Lexer::getNextToken()
{
    if (!tokenStack.empty()) {
        tkAhead tk = tokenStack.top();
        tokenStack.pop();  // Elimina el token de la pila
        std::cout << "Returning token from stack: " << tokenToString(tk.tk) << std::endl;
        text = tk.text;
        return tk.tk;
    }
    text.clear();
/*!fa2lexer
    %generate.lexer (text);
*/
}

const char *Lexer::tokenToString(Token tk)
{
/*!fa2lexer
    %generate.toString (tk);
*/
}